=encoding utf8

=head1 Типове оператори

Z<operator_types>

Операторите в Perl указват стойностния контекст, в който аргументите
ще бъдат изпълнени.  За да изберете правилния оператор, трябва да
разберете стойностите на аргументите, които подавате, както и
стойността, която очаквате да получите.

=head2 Цифрови оператори

Z<numeric_operators>

X<оператори; цифров>
X<оператори; аритметичен>
X<оператори; C<+>>
X<C<+>; цифров оператор>
X<оператори; C<->>
X<C<->; цифров оператор>
X<оператори; C<*>>
X<C<*>; цифров оператор>
X<оператори; C</>>
X<C</>; цифров оператор>
X<оператори; C<**>>
X<C<**>; цифров оператор>
X<оператори; C<%>>
X<C<%>; цифров оператор>
X<оператори; C<+=>>
X<C<+=>; цифров оператор>
X<оператори; C<-=>>
X<C<-=>; цифров оператор>
X<оператори; C<*=>>
X<C<*=>; цифров оператор>
X<оператори; C</=>>
X<C</=>; цифров оператор>
X<оператори; C<**=>>
X<C<**=>; цифров оператор>
X<оператори; C<%=>>
X<C<%=>; цифров оператор>
X<оператори; C<-->>
X<C<-->; цифров оператор>

Цифровите оператори налагат цифров контекст върху своите
аргументи. Операторите, които правят това, са стандартните аритметични
оператори като събиране (C<+>); изваждане (C<->); умножение (C<*>);
деление (C</>); повдигане на степен (C<**>); деление по модул (C<%>);
техните варианти, които работят директно върху променливата (C<+=>,
C<-=>, C<*=>, C</=>, C<**=>, и C<%=>); и postfix и prefix автоматично
намаляване на (C<-->).

Операторът за автоматично увеличение има специално поведение, когато
се прилага върху низови стойности (L<auto_increment_operator>).

X<оператори; C<==>>
X<оператори; C<!=>>
X<<< оператори; C<< E<lt> >> >>>
X<<< оператори; C<< E<gt> >> >>>
X<<< оператори; C<< E<lt>= >> >>>
X<<< оператори; C<< E<gt>= >> >>>
X<<< оператори; C<< E<lt>=E<gt> >> >>>

X<C<!=>; оператор за цифрово сравнение>
X<C<==>; оператор за цифрово сравнение>
X<<< C<< E<gt> >>; оператор за цифрово сравнение >>>
X<<< C<< E<lt> >>; оператор за цифрово сравнение >>>
X<<< C<< E<gt>= >>; оператор за цифрово сравнение >>>
X<<< C<< E<lt>= >>; оператор за цифрово сравнение >>>
X<<< C<< E<lt>=E<gt> >>; оператор за цифрово сравнение >>>

Няколко оператора за сравнение налагат цифров контекст върху своите
аргументи. Те са оператора за цифрово равенство (C<==>); за цифрово
неравенство (C<!=>); по-голямо (C<< E<gt> >>); по-малко (C<< E<lt>
>>); по-голямо или равно (C<< E<gt>= >>); по-малко или равно (C<<
E<lt>= >>); и сортиращият оператор за сравнение (C<< E<lt>=E<gt>
>>()).

=head2 Оператори за работа с низове

X<оператори; низ>
X<низове; оператори>
X<оператори; C<=~>>
X<C<=~>; низов operator>
X<оператори; C<!~>>
X<C<!~>; низов operator>
X<оператори; C<.>>
X<C<.>; низов operator>

Операторите за низове налагат нивоз контексто върху своите
аргументи. Тези оператори са операторите за положително и отрицателно
обвързване на регулярен израз (C<=~> и C<!~>), както и оператора за
конкатация (C<.>).

X<operators; C<eq>>
X<operators; C<ne>>
X<operators; C<gt>>
X<operators; C<lt>>
X<operators; C<ge>>
X<operators; C<le>>
X<operators; C<cmp>>
X<C<eq>; string comparison operator>
X<C<ne>; string comparison operator>
X<C<gt>; string comparison operator>
X<C<lt>; string comparison operator>
X<C<ge>; string comparison operator>
X<C<le>; string comparison operator>
X<C<cmp>; string comparison operator>

Several comparison operators impose string contexts upon their operands. These
are string equality (C<eq>), string inequality (C<ne>), greater than (C<gt>),
less than (C<lt>), greater than or equal to (C<ge>), less than or equal to
(C<le>), and the string sort comparison operator (C<cmp>).

=head2 Logical Operators

X<operators; logical>
X<operators; C<&&>>
X<operators; C<and>>
X<operators; C<||>>
X<operators; C<or>>
X<operators; C<//>>
X<operators; C<?:>>
X<operators; C<!>>
X<operators; C<not>>
X<operators; C<xor>>
X<C<&&>; logical operator>
X<C<and>; logical operator>
X<C<||>; logical operator>
X<C<or>; logical operator>
X<C<//>; logical operator>
X<C<?:>; logical operator>
X<C<!>; logical operator>
X<C<not>; logical operator>
X<C<xor>; logical operator>
X<operators; defined-or>
X<defined-or; logical operator>
X<short-circuiting>

Logical operators impose a boolean context on their operands. These operators
are C<&&>, C<and>, C<||>, and C<or>. All are infix and all exhibit
I<short-circuiting> behavior (L<short_circuiting>). The word variants have
lower precedence than their punctuation forms.

The defined-or operator, C<//>, tests the I<definedness> of its operand. Unlike
C<||> which tests the I<truth> of its operand, C<//> evaluates to a true value
even if its operand evaluates to a numeric zero or the empty string. This is
especially useful for setting default parameter values:

=begin programlisting

    sub name_pet
    {
        my $name = shift // 'Fluffy';
        ...
    }

=end programlisting

X<C<?:>; ternary conditional operator>

The ternary conditional operator (C<?:>) takes three operands. It evaluates the
first in boolean context and evaluates to the second if the first is true and
the third otherwise:

=begin programlisting

    my $truthiness = $value ? 'true' : 'false';

=end programlisting

The prefix C<!> and C<not> operators return the logical opposite of the boolean
value of their operands. C<not> is a lower precedence version of C<!>.

The C<xor> operator is an infix operator which evaluates to the exclusive-or of
its operands.

=head2 Bitwise Operators

X<operators; bitwise>
X<<< operators; C<< E<lt>E<lt> >> >>>
X<<< operators; C<< E<gt>E<gt> >> >>>
X<operators; C<&>>
X<operators; C<|>>
X<operators; C<^>>
X<operators; C<&=>>
X<operators; C<|=>>
X<operators; C<^=>>
X<<< operators; C<< E<lt>E<lt>= >> >>>
X<<< operators; C<< E<gt>E<gt>= >> >>>

X<<< C<< E<lt>E<lt> >>; bitwise operator >>>
X<<< C<< E<gt>E<gt> >>; bitwise operator >>>

X<C<&>; bitwise operator>
X<C<|>; bitwise operator>
X<C<^>; bitwise operator>
X<C<&=>; bitwise operator>
X<C<|=>; bitwise operator>
X<C<^=>; bitwise operator>
X<<< C<< E<lt>E<lt>= >>; bitwise operator >>>
X<<< C<< E<gt>E<gt>= >>; bitwise operator >>>

Bitwise operators treat their operands numerically at the bit level. These
operations are uncommon. They consist of left shift (C<< << >>), right shift
(C<< >> >>), bitwise and (C<&>), bitwise or (C<|>), and bitwise xor (C<^>), as
well as their in-place variants (C<< <<= >>, C<< >>= >>, C<&=>, C<|=>, and
C<^=>).

=head2 Special Operators

Z<auto_increment_operator>

X<operators; auto-increment>
X<auto-increment>
X<operators; C<++>>
X<C<++>; auto-increment operator>

The auto-increment operator has special behavior. When used on a value with a
numeric component (L<cached_coercions>), the operator increments that numeric
component. If the value is obviously a string (and has no numeric component),
the operator increments that string value such that C<a> becomes C<b>, C<zz>
becomes C<aaa>, and C<a9> becomes C<b0>.

=begin programlisting

    my $num = 1;
    my $str = 'a';

    $num++;
    $str++;
    is( $num,   2, 'numeric autoincrement' );
    is( $str, 'b', 'string autoincrement'  );

    no warnings 'numeric';
    $num += $str;
    $str++;

    is( $num, 2, 'numeric addition with $str'    );
    is( $str, 1, '... gives $str a numeric part' );

=end programlisting

X<operators; repetition>
X<operators; C<x>>
X<C<x>; repetition operator>

The repetition operator (C<x>) is an infix operator with complex behavior. In
list context, when given a list, it evaluates to that list repeated the number
of times specified by its second operand. In list context when given a scalar,
it produces a string consisting of the string value of its first operand
concatenated to itself the number of times specified by its second operand.

In scalar context, the operator always produces a concatenated string repeated
appropriately. For example:

=begin programlisting

    my @scheherazade = ('nights') x 1001;
    my $calendar     =  'nights'  x 1001;
    my $cal_length   =  length $calendar;

    is( @scheherazade, 1001, 'list repeated' );
    is( $cal_length,   1001 * length 'nights',
                       'word repeated' );

    my @schenolist   =  'nights'  x 1001;
    my $calscalar    = ('nights') x 1001;

    is( @schenolist, 1, 'no lvalue list' );
    is( length $calscalar,
        1001 * length 'nights', 'word still repeated' );

=end programlisting

X<operators; range>
X<range>
X<operators; C<..>>
X<C<..>; range operator>

The infix I<range> operator (C<..>) produces a list of items in list context:

=begin programlisting

    my @cards = ( 2 .. 10, 'J', 'Q', 'K', 'A' );

=end programlisting

It can produce simple, incrementing ranges (both as integers or strings), but
it cannot intuit patterns or more complex ranges.

X<operators; flip-flop>
X<flip-flop>
X<C<..>; flip-flop operator>

In boolean context, the range operator becomes the I<flip-flop> operator. This
operator produces a false value until its left operand is true. That value
stays true until the right operand is true, after which the value is false
again until the left operand is true again. Imagine parsing the text of a
formal letter with:

=begin programlisting

    while (/Hello, $user/ .. /Sincerely,/)
    {
        say "> $_";
    }

=end programlisting

X<operators; comma>
X<operators; C<,>>
X<C<,>; operator>
X<<< operators; C<< =E<gt> >> >>>
X<<< C<< =E<gt> >>; fat comma operator >>>

The I<comma> operator (C<,>) is an infix operator. In scalar context it
evaluates its left operand then returns the value produced by evaluating its
right operand. In list context, it evaluates both operands in left-to-right
order.

The fat comma operator (C<< => >>) also automatically quotes any bareword used
as its left operand (L<hashes>).
